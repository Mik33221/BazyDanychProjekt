@page
@model Sklep3.Pages.Klient.CartModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{ 
    decimal total = 0;
}
<br />
<h2>Koszyk</h2>
<a class="btn btn-primary btn-sm" href="/Klient">Wróć</a>
<table class="table">
	<thead>
		<tr>
			<th>Nazwa</th>
			<th>Ilość w magazynie</th>
			<th>Ilość w koszyku</th>
			<th>Kategoria</th>
			<th>Platforma</th>
			<th>Cena</th>
			<th>Suma</th>
			<th>Akcje</th>
		</tr>
	</thead>
	<tbody>
		@foreach(var item in Model.ProduktyWKoszykuLista)
		{
			var quantity = Model.Quantities[item.id];
			decimal itemPrice;
			if (!decimal.TryParse(item.cena, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out itemPrice))
			{
				itemPrice = 0; // Domyślna wartość, jeśli parsowanie się nie powiedzie
			}
			var subtotal = itemPrice * quantity;
			total += subtotal;

			<tr>
				<td>@item.nazwa</td>
				<td>@item.ilosc</td>
				<td>
					<div class="input-group" style="width: 150px;">
						<button class="btn btn-outline-secondary btn-sm" onclick="updateQuantity('@item.id', -1)">-</button>
						<input type="number" class="form-control form-control-sm" id="quantity-@item.id" 
							   value="@quantity" min="1" max="@item.ilosc" 
							   onchange="updateQuantity('@item.id', 0)">
						<button class="btn btn-outline-secondary btn-sm" onclick="updateQuantity('@item.id', 1)">+</button>
					</div>
				</td>
				<td>@item.kategoria</td>
				<td>@item.platforma</td>
				<td>@item.cena zł</td>
				<td>@subtotal.ToString("0.00") zł</td>
				<td>
					<a class="btn btn-outline-danger btn-sm" href="/Klient/DeleteCart?id=@item.id">Usuń</a>
				</td>
			</tr>
		}
	</tbody>
	<tfoot>
		<tr>
			<td colspan="7" class="text-end"><strong>Suma całkowita:</strong></td>
			<td><strong>@total.ToString("0.00") zł</strong></td>
			<td></td>
		</tr>
	</tfoot>
</table>

@if (Model.ProduktyWKoszykuLista.Any())
{
	<div class="text-end mt-3">
		<a class="btn btn-success" href="/Klient/Checkout">Złóż zamówienie</a>
	</div>
}

@section Scripts {
	<script>
		function updateQuantity(productId, change) {
			const input = document.getElementById(`quantity-${productId}`);
			const currentValue = parseInt(input.value);
			const maxValue = parseInt(input.max);
			
			if (change === 0) {
				// Walidacja przy ręcznej zmianie
				if (input.value < 1) input.value = 1;
				if (input.value > maxValue) input.value = maxValue;
			} else {
				// Zmiana przyciskami +/-
				const newValue = currentValue + change;
				if (newValue >= 1 && newValue <= maxValue) {
					input.value = newValue;
				} else {
					return; // Nie wykonuj aktualizacji jeśli wartość jest poza zakresem
				}
			}

			// Przygotuj dane formularza
			const formData = new FormData();
			formData.append('id', productId);
			formData.append('quantity', input.value);

			// Wywołaj endpoint do aktualizacji koszyka
			fetch('/Klient/UpdateCart', {
				method: 'POST',
				body: formData
			}).then(response => {
				if (response.ok) {
					location.reload();
				}
			});
		}
	</script>
}
